/*
 * DEV API (beta)
 *
 *  Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  All requests must send a user-agent header.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format. 
 *
 * The version of the OpenAPI document: 0.9.7
 * Contact: yo@dev.to
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ForemVersionZero.Client;
using ForemVersionZero.Api;
// uncomment below to import models
//using ForemVersionZero.Model;

namespace ForemVersionZero.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UsersApi
            //Assert.IsType<UsersApi>(instance);
        }

        /// <summary>
        /// Test GetUser
        /// </summary>
        [Fact]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string? url = null;
            //var response = instance.GetUser(id, url);
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test GetUserAllArticles
        /// </summary>
        [Fact]
        public void GetUserAllArticlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.GetUserAllArticles(page, perPage);
            //Assert.IsType<List<ArticleMe>>(response);
        }

        /// <summary>
        /// Test GetUserArticles
        /// </summary>
        [Fact]
        public void GetUserArticlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.GetUserArticles(page, perPage);
            //Assert.IsType<List<ArticleMe>>(response);
        }

        /// <summary>
        /// Test GetUserMe
        /// </summary>
        [Fact]
        public void GetUserMeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserMe();
            //Assert.IsType<User>(response);
        }

        /// <summary>
        /// Test GetUserPublishedArticles
        /// </summary>
        [Fact]
        public void GetUserPublishedArticlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.GetUserPublishedArticles(page, perPage);
            //Assert.IsType<List<ArticleMe>>(response);
        }

        /// <summary>
        /// Test GetUserUnpublishedArticles
        /// </summary>
        [Fact]
        public void GetUserUnpublishedArticlesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.GetUserUnpublishedArticles(page, perPage);
            //Assert.IsType<List<ArticleMe>>(response);
        }

        /// <summary>
        /// Test PostAdminUsersCreate
        /// </summary>
        [Fact]
        public void PostAdminUsersCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AdminUserCreate? adminUserCreate = null;
            //instance.PostAdminUsersCreate(adminUserCreate);
        }
    }
}
