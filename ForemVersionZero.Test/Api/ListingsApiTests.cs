/*
 * DEV API (beta)
 *
 *  Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  All requests must send a user-agent header.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format. 
 *
 * The version of the OpenAPI document: 0.9.7
 * Contact: yo@dev.to
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ForemVersionZero.Client;
using ForemVersionZero.Api;
// uncomment below to import models
//using ForemVersionZero.Model;

namespace ForemVersionZero.Test.Api
{
    /// <summary>
    ///  Class for testing ListingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ListingsApiTests : IDisposable
    {
        private ListingsApi instance;

        public ListingsApiTests()
        {
            instance = new ListingsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ListingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ListingsApi
            //Assert.IsType<ListingsApi>(instance);
        }

        /// <summary>
        /// Test CreateListing
        /// </summary>
        [Fact]
        public void CreateListingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListingCreate? listingCreate = null;
            //var response = instance.CreateListing(listingCreate);
            //Assert.IsType<Listing>(response);
        }

        /// <summary>
        /// Test GetListingById
        /// </summary>
        [Fact]
        public void GetListingByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //var response = instance.GetListingById(id);
            //Assert.IsType<Listing>(response);
        }

        /// <summary>
        /// Test GetListings
        /// </summary>
        [Fact]
        public void GetListingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string? category = null;
            //var response = instance.GetListings(page, perPage, category);
            //Assert.IsType<List<Listing>>(response);
        }

        /// <summary>
        /// Test GetListingsByCategory
        /// </summary>
        [Fact]
        public void GetListingsByCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListingCategory category = null;
            //int? page = null;
            //int? perPage = null;
            //var response = instance.GetListingsByCategory(category, page, perPage);
            //Assert.IsType<List<Listing>>(response);
        }

        /// <summary>
        /// Test UpdateListing
        /// </summary>
        [Fact]
        public void UpdateListingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //ListingUpdate? listingUpdate = null;
            //var response = instance.UpdateListing(id, listingUpdate);
            //Assert.IsType<ArticleShow>(response);
        }
    }
}
