/*
 * DEV API (beta)
 *
 *  Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  All requests must send a user-agent header.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format. 
 *
 * The version of the OpenAPI document: 0.9.7
 * Contact: yo@dev.to
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ForemVersionZero.Client.OpenAPIDateConverter;

namespace ForemVersionZero.Model
{
    /// <summary>
    /// ArticleVideo
    /// </summary>
    [DataContract(Name = "ArticleVideo")]
    public partial class ArticleVideo : IEquatable<ArticleVideo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleVideo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArticleVideo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleVideo" /> class.
        /// </summary>
        /// <param name="typeOf">typeOf (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="path">path (required).</param>
        /// <param name="cloudinaryVideoUrl">The preview image of the video (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="videoDurationInMinutes">The duration of the video.  If the video duration is below 1 hour, the format will be &#x60;mm:ss&#x60;, if it&#39;s 1 hour or above the format will be &#x60;h:mm:ss&#x60;.  (required).</param>
        /// <param name="videoSourceUrl">videoSourceUrl (required).</param>
        /// <param name="user">user (required).</param>
        public ArticleVideo(string typeOf = default(string), int id = default(int), string path = default(string), string cloudinaryVideoUrl = default(string), string title = default(string), int userId = default(int), string videoDurationInMinutes = default(string), string videoSourceUrl = default(string), ArticleVideoUser user = default(ArticleVideoUser))
        {
            // to ensure "typeOf" is required (not null)
            if (typeOf == null)
            {
                throw new ArgumentNullException("typeOf is a required property for ArticleVideo and cannot be null");
            }
            this.TypeOf = typeOf;
            this.Id = id;
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for ArticleVideo and cannot be null");
            }
            this.Path = path;
            // to ensure "cloudinaryVideoUrl" is required (not null)
            if (cloudinaryVideoUrl == null)
            {
                throw new ArgumentNullException("cloudinaryVideoUrl is a required property for ArticleVideo and cannot be null");
            }
            this.CloudinaryVideoUrl = cloudinaryVideoUrl;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for ArticleVideo and cannot be null");
            }
            this.Title = title;
            this.UserId = userId;
            // to ensure "videoDurationInMinutes" is required (not null)
            if (videoDurationInMinutes == null)
            {
                throw new ArgumentNullException("videoDurationInMinutes is a required property for ArticleVideo and cannot be null");
            }
            this.VideoDurationInMinutes = videoDurationInMinutes;
            // to ensure "videoSourceUrl" is required (not null)
            if (videoSourceUrl == null)
            {
                throw new ArgumentNullException("videoSourceUrl is a required property for ArticleVideo and cannot be null");
            }
            this.VideoSourceUrl = videoSourceUrl;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for ArticleVideo and cannot be null");
            }
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets TypeOf
        /// </summary>
        [DataMember(Name = "type_of", IsRequired = true, EmitDefaultValue = true)]
        public string TypeOf { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// The preview image of the video
        /// </summary>
        /// <value>The preview image of the video</value>
        [DataMember(Name = "cloudinary_video_url", IsRequired = true, EmitDefaultValue = true)]
        public string CloudinaryVideoUrl { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public int UserId { get; set; }

        /// <summary>
        /// The duration of the video.  If the video duration is below 1 hour, the format will be &#x60;mm:ss&#x60;, if it&#39;s 1 hour or above the format will be &#x60;h:mm:ss&#x60;. 
        /// </summary>
        /// <value>The duration of the video.  If the video duration is below 1 hour, the format will be &#x60;mm:ss&#x60;, if it&#39;s 1 hour or above the format will be &#x60;h:mm:ss&#x60;. </value>
        [DataMember(Name = "video_duration_in_minutes", IsRequired = true, EmitDefaultValue = true)]
        public string VideoDurationInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets VideoSourceUrl
        /// </summary>
        [DataMember(Name = "video_source_url", IsRequired = true, EmitDefaultValue = true)]
        public string VideoSourceUrl { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public ArticleVideoUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ArticleVideo {\n");
            sb.Append("  TypeOf: ").Append(TypeOf).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  CloudinaryVideoUrl: ").Append(CloudinaryVideoUrl).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  VideoDurationInMinutes: ").Append(VideoDurationInMinutes).Append("\n");
            sb.Append("  VideoSourceUrl: ").Append(VideoSourceUrl).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArticleVideo);
        }

        /// <summary>
        /// Returns true if ArticleVideo instances are equal
        /// </summary>
        /// <param name="input">Instance of ArticleVideo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticleVideo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TypeOf == input.TypeOf ||
                    (this.TypeOf != null &&
                    this.TypeOf.Equals(input.TypeOf))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.CloudinaryVideoUrl == input.CloudinaryVideoUrl ||
                    (this.CloudinaryVideoUrl != null &&
                    this.CloudinaryVideoUrl.Equals(input.CloudinaryVideoUrl))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.UserId == input.UserId ||
                    this.UserId.Equals(input.UserId)
                ) && 
                (
                    this.VideoDurationInMinutes == input.VideoDurationInMinutes ||
                    (this.VideoDurationInMinutes != null &&
                    this.VideoDurationInMinutes.Equals(input.VideoDurationInMinutes))
                ) && 
                (
                    this.VideoSourceUrl == input.VideoSourceUrl ||
                    (this.VideoSourceUrl != null &&
                    this.VideoSourceUrl.Equals(input.VideoSourceUrl))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeOf != null)
                {
                    hashCode = (hashCode * 59) + this.TypeOf.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.CloudinaryVideoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CloudinaryVideoUrl.GetHashCode();
                }
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                if (this.VideoDurationInMinutes != null)
                {
                    hashCode = (hashCode * 59) + this.VideoDurationInMinutes.GetHashCode();
                }
                if (this.VideoSourceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.VideoSourceUrl.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
