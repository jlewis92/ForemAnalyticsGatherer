/*
 * DEV API (beta)
 *
 *  Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  All requests must send a user-agent header.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format. 
 *
 * The version of the OpenAPI document: 0.9.7
 * Contact: yo@dev.to
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ForemVersionZero.Client.OpenAPIDateConverter;

namespace ForemVersionZero.Model
{
    /// <summary>
    /// Profile image
    /// </summary>
    [DataContract(Name = "ProfileImage")]
    public partial class ProfileImage : IEquatable<ProfileImage>, IValidatableObject
    {
        /// <summary>
        /// Defines TypeOf
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeOfEnum
        {
            /// <summary>
            /// Enum ProfileImage for value: profile_image
            /// </summary>
            [EnumMember(Value = "profile_image")]
            ProfileImage = 1

        }


        /// <summary>
        /// Gets or Sets TypeOf
        /// </summary>
        [DataMember(Name = "type_of", EmitDefaultValue = false)]
        public TypeOfEnum? TypeOf { get; set; }
        /// <summary>
        /// Discriminates what is the type of the profile image owner (user or organization)
        /// </summary>
        /// <value>Discriminates what is the type of the profile image owner (user or organization)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImageOfEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 1,

            /// <summary>
            /// Enum Organization for value: organization
            /// </summary>
            [EnumMember(Value = "organization")]
            Organization = 2

        }


        /// <summary>
        /// Discriminates what is the type of the profile image owner (user or organization)
        /// </summary>
        /// <value>Discriminates what is the type of the profile image owner (user or organization)</value>
        [DataMember(Name = "image_of", EmitDefaultValue = false)]
        public ImageOfEnum? ImageOf { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileImage" /> class.
        /// </summary>
        /// <param name="typeOf">typeOf.</param>
        /// <param name="imageOf">Discriminates what is the type of the profile image owner (user or organization).</param>
        /// <param name="profileImage">Profile image (640x640).</param>
        /// <param name="profileImage90">Profile image (90x90).</param>
        public ProfileImage(TypeOfEnum? typeOf = default(TypeOfEnum?), ImageOfEnum? imageOf = default(ImageOfEnum?), string profileImage = default(string), string profileImage90 = default(string))
        {
            this.TypeOf = typeOf;
            this.ImageOf = imageOf;
            this._ProfileImage = profileImage;
            this.ProfileImage90 = profileImage90;
        }

        /// <summary>
        /// Profile image (640x640)
        /// </summary>
        /// <value>Profile image (640x640)</value>
        [DataMember(Name = "profile_image", EmitDefaultValue = false)]
        public string _ProfileImage { get; set; }

        /// <summary>
        /// Profile image (90x90)
        /// </summary>
        /// <value>Profile image (90x90)</value>
        [DataMember(Name = "profile_image_90", EmitDefaultValue = false)]
        public string ProfileImage90 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileImage {\n");
            sb.Append("  TypeOf: ").Append(TypeOf).Append("\n");
            sb.Append("  ImageOf: ").Append(ImageOf).Append("\n");
            sb.Append("  _ProfileImage: ").Append(_ProfileImage).Append("\n");
            sb.Append("  ProfileImage90: ").Append(ProfileImage90).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileImage);
        }

        /// <summary>
        /// Returns true if ProfileImage instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileImage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileImage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TypeOf == input.TypeOf ||
                    this.TypeOf.Equals(input.TypeOf)
                ) && 
                (
                    this.ImageOf == input.ImageOf ||
                    this.ImageOf.Equals(input.ImageOf)
                ) && 
                (
                    this._ProfileImage == input._ProfileImage ||
                    (this._ProfileImage != null &&
                    this._ProfileImage.Equals(input._ProfileImage))
                ) && 
                (
                    this.ProfileImage90 == input.ProfileImage90 ||
                    (this.ProfileImage90 != null &&
                    this.ProfileImage90.Equals(input.ProfileImage90))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TypeOf.GetHashCode();
                hashCode = (hashCode * 59) + this.ImageOf.GetHashCode();
                if (this._ProfileImage != null)
                {
                    hashCode = (hashCode * 59) + this._ProfileImage.GetHashCode();
                }
                if (this.ProfileImage90 != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileImage90.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
