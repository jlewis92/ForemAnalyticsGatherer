/*
 * DEV API (beta)
 *
 *  Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  All requests must send a user-agent header.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format. 
 *
 * The version of the OpenAPI document: 0.9.7
 * Contact: yo@dev.to
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ForemVersionZero.Client.OpenAPIDateConverter;

namespace ForemVersionZero.Model
{
    /// <summary>
    /// ListingUpdateListing
    /// </summary>
    [DataContract(Name = "ListingUpdate_listing")]
    public partial class ListingUpdateListing : IEquatable<ListingUpdateListing>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public ListingCategory? Category { get; set; }
        /// <summary>
        /// This param can be provided by itself to invoke some actions:  - &#x60;bump&#x60; bumps the listing and charge either the   organization or the user - &#x60;publish&#x60; publishes a draft listing - &#x60;unpublish&#x60; unpublishes a published listing  It will take priority on any other param in the payload. 
        /// </summary>
        /// <value>This param can be provided by itself to invoke some actions:  - &#x60;bump&#x60; bumps the listing and charge either the   organization or the user - &#x60;publish&#x60; publishes a draft listing - &#x60;unpublish&#x60; unpublishes a published listing  It will take priority on any other param in the payload. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Bump for value: bump
            /// </summary>
            [EnumMember(Value = "bump")]
            Bump = 1,

            /// <summary>
            /// Enum Publish for value: publish
            /// </summary>
            [EnumMember(Value = "publish")]
            Publish = 2,

            /// <summary>
            /// Enum Unpublish for value: unpublish
            /// </summary>
            [EnumMember(Value = "unpublish")]
            Unpublish = 3

        }


        /// <summary>
        /// This param can be provided by itself to invoke some actions:  - &#x60;bump&#x60; bumps the listing and charge either the   organization or the user - &#x60;publish&#x60; publishes a draft listing - &#x60;unpublish&#x60; unpublishes a published listing  It will take priority on any other param in the payload. 
        /// </summary>
        /// <value>This param can be provided by itself to invoke some actions:  - &#x60;bump&#x60; bumps the listing and charge either the   organization or the user - &#x60;publish&#x60; publishes a draft listing - &#x60;unpublish&#x60; unpublishes a published listing  It will take priority on any other param in the payload. </value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingUpdateListing" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="bodyMarkdown">The body of the listing in Markdown format..</param>
        /// <param name="category">category.</param>
        /// <param name="tags">Tags related to the listing.  A maximum of 8 tags are allowed and it takes precedence over &#x60;tag_list&#x60;. .</param>
        /// <param name="tagList">Comma separated list of tags.  A maximum of 8 tags are allowed. .</param>
        /// <param name="expiresAt">Date and time of expiration..</param>
        /// <param name="contactViaConnect">True if users are allowed to contact the listing&#39;s owner via DEV connect, false otherwise.  Defaults to false. .</param>
        /// <param name="location">Geographical area or city for the listing..</param>
        /// <param name="action">This param can be provided by itself to invoke some actions:  - &#x60;bump&#x60; bumps the listing and charge either the   organization or the user - &#x60;publish&#x60; publishes a draft listing - &#x60;unpublish&#x60; unpublishes a published listing  It will take priority on any other param in the payload. .</param>
        public ListingUpdateListing(string title = default(string), string bodyMarkdown = default(string), ListingCategory? category = default(ListingCategory?), List<string> tags = default(List<string>), string tagList = default(string), DateTime expiresAt = default(DateTime), bool contactViaConnect = default(bool), string location = default(string), ActionEnum? action = default(ActionEnum?))
        {
            this.Title = title;
            this.BodyMarkdown = bodyMarkdown;
            this.Category = category;
            this.Tags = tags;
            this.TagList = tagList;
            this.ExpiresAt = expiresAt;
            this.ContactViaConnect = contactViaConnect;
            this.Location = location;
            this.Action = action;
        }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The body of the listing in Markdown format.
        /// </summary>
        /// <value>The body of the listing in Markdown format.</value>
        [DataMember(Name = "body_markdown", EmitDefaultValue = false)]
        public string BodyMarkdown { get; set; }

        /// <summary>
        /// Tags related to the listing.  A maximum of 8 tags are allowed and it takes precedence over &#x60;tag_list&#x60;. 
        /// </summary>
        /// <value>Tags related to the listing.  A maximum of 8 tags are allowed and it takes precedence over &#x60;tag_list&#x60;. </value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Comma separated list of tags.  A maximum of 8 tags are allowed. 
        /// </summary>
        /// <value>Comma separated list of tags.  A maximum of 8 tags are allowed. </value>
        [DataMember(Name = "tag_list", EmitDefaultValue = false)]
        public string TagList { get; set; }

        /// <summary>
        /// Date and time of expiration.
        /// </summary>
        /// <value>Date and time of expiration.</value>
        [DataMember(Name = "expires_at", EmitDefaultValue = false)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// True if users are allowed to contact the listing&#39;s owner via DEV connect, false otherwise.  Defaults to false. 
        /// </summary>
        /// <value>True if users are allowed to contact the listing&#39;s owner via DEV connect, false otherwise.  Defaults to false. </value>
        [DataMember(Name = "contact_via_connect", EmitDefaultValue = true)]
        public bool ContactViaConnect { get; set; }

        /// <summary>
        /// Geographical area or city for the listing.
        /// </summary>
        /// <value>Geographical area or city for the listing.</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListingUpdateListing {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  BodyMarkdown: ").Append(BodyMarkdown).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TagList: ").Append(TagList).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  ContactViaConnect: ").Append(ContactViaConnect).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListingUpdateListing);
        }

        /// <summary>
        /// Returns true if ListingUpdateListing instances are equal
        /// </summary>
        /// <param name="input">Instance of ListingUpdateListing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingUpdateListing input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.BodyMarkdown == input.BodyMarkdown ||
                    (this.BodyMarkdown != null &&
                    this.BodyMarkdown.Equals(input.BodyMarkdown))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TagList == input.TagList ||
                    (this.TagList != null &&
                    this.TagList.Equals(input.TagList))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.ContactViaConnect == input.ContactViaConnect ||
                    this.ContactViaConnect.Equals(input.ContactViaConnect)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Action == input.Action ||
                    this.Action.Equals(input.Action)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.BodyMarkdown != null)
                {
                    hashCode = (hashCode * 59) + this.BodyMarkdown.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.TagList != null)
                {
                    hashCode = (hashCode * 59) + this.TagList.GetHashCode();
                }
                if (this.ExpiresAt != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContactViaConnect.GetHashCode();
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Action.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
