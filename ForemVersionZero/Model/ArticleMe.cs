/*
 * DEV API (beta)
 *
 *  Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  All requests must send a user-agent header.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format. 
 *
 * The version of the OpenAPI document: 0.9.7
 * Contact: yo@dev.to
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ForemVersionZero.Client.OpenAPIDateConverter;

namespace ForemVersionZero.Model
{
    /// <summary>
    /// ArticleMe
    /// </summary>
    [DataContract(Name = "ArticleMe")]
    public partial class ArticleMe : IEquatable<ArticleMe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleMe" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArticleMe() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArticleMe" /> class.
        /// </summary>
        /// <param name="typeOf">typeOf (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="coverImage">coverImage (required).</param>
        /// <param name="published">published (required).</param>
        /// <param name="publishedAt">publishedAt (required).</param>
        /// <param name="tagList">tagList (required).</param>
        /// <param name="slug">slug (required).</param>
        /// <param name="path">path (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="canonicalUrl">canonicalUrl (required).</param>
        /// <param name="commentsCount">commentsCount (required).</param>
        /// <param name="positiveReactionsCount">positiveReactionsCount (required).</param>
        /// <param name="publicReactionsCount">publicReactionsCount (required).</param>
        /// <param name="pageViewsCount">pageViewsCount (required).</param>
        /// <param name="publishedTimestamp">Crossposting or published date time (required).</param>
        /// <param name="bodyMarkdown">The body of the article in Markdown format (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="readingTimeMinutes">Reading time, in minutes (required).</param>
        /// <param name="organization">organization.</param>
        /// <param name="flareTag">flareTag.</param>
        public ArticleMe(string typeOf = default(string), int id = default(int), string title = default(string), string description = default(string), string coverImage = default(string), bool published = default(bool), DateTime publishedAt = default(DateTime), List<string> tagList = default(List<string>), string slug = default(string), string path = default(string), string url = default(string), string canonicalUrl = default(string), int commentsCount = default(int), int positiveReactionsCount = default(int), int publicReactionsCount = default(int), int pageViewsCount = default(int), DateTime publishedTimestamp = default(DateTime), string bodyMarkdown = default(string), SharedUser user = default(SharedUser), int readingTimeMinutes = default(int), SharedOrganization organization = default(SharedOrganization), ArticleFlareTag flareTag = default(ArticleFlareTag))
        {
            // to ensure "typeOf" is required (not null)
            if (typeOf == null)
            {
                throw new ArgumentNullException("typeOf is a required property for ArticleMe and cannot be null");
            }
            this.TypeOf = typeOf;
            this.Id = id;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for ArticleMe and cannot be null");
            }
            this.Title = title;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ArticleMe and cannot be null");
            }
            this.Description = description;
            // to ensure "coverImage" is required (not null)
            if (coverImage == null)
            {
                throw new ArgumentNullException("coverImage is a required property for ArticleMe and cannot be null");
            }
            this.CoverImage = coverImage;
            this.Published = published;
            this.PublishedAt = publishedAt;
            // to ensure "tagList" is required (not null)
            if (tagList == null)
            {
                throw new ArgumentNullException("tagList is a required property for ArticleMe and cannot be null");
            }
            this.TagList = tagList;
            // to ensure "slug" is required (not null)
            if (slug == null)
            {
                throw new ArgumentNullException("slug is a required property for ArticleMe and cannot be null");
            }
            this.Slug = slug;
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for ArticleMe and cannot be null");
            }
            this.Path = path;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for ArticleMe and cannot be null");
            }
            this.Url = url;
            // to ensure "canonicalUrl" is required (not null)
            if (canonicalUrl == null)
            {
                throw new ArgumentNullException("canonicalUrl is a required property for ArticleMe and cannot be null");
            }
            this.CanonicalUrl = canonicalUrl;
            this.CommentsCount = commentsCount;
            this.PositiveReactionsCount = positiveReactionsCount;
            this.PublicReactionsCount = publicReactionsCount;
            this.PageViewsCount = pageViewsCount;
            this.PublishedTimestamp = publishedTimestamp;
            // to ensure "bodyMarkdown" is required (not null)
            if (bodyMarkdown == null)
            {
                throw new ArgumentNullException("bodyMarkdown is a required property for ArticleMe and cannot be null");
            }
            this.BodyMarkdown = bodyMarkdown;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for ArticleMe and cannot be null");
            }
            this.User = user;
            this.ReadingTimeMinutes = readingTimeMinutes;
            this.Organization = organization;
            this.FlareTag = flareTag;
        }

        /// <summary>
        /// Gets or Sets TypeOf
        /// </summary>
        [DataMember(Name = "type_of", IsRequired = true, EmitDefaultValue = true)]
        public string TypeOf { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CoverImage
        /// </summary>
        [DataMember(Name = "cover_image", IsRequired = true, EmitDefaultValue = true)]
        public string CoverImage { get; set; }

        /// <summary>
        /// Gets or Sets Published
        /// </summary>
        [DataMember(Name = "published", IsRequired = true, EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Gets or Sets PublishedAt
        /// </summary>
        [DataMember(Name = "published_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime PublishedAt { get; set; }

        /// <summary>
        /// Gets or Sets TagList
        /// </summary>
        [DataMember(Name = "tag_list", IsRequired = true, EmitDefaultValue = true)]
        public List<string> TagList { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = true)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets CanonicalUrl
        /// </summary>
        [DataMember(Name = "canonical_url", IsRequired = true, EmitDefaultValue = true)]
        public string CanonicalUrl { get; set; }

        /// <summary>
        /// Gets or Sets CommentsCount
        /// </summary>
        [DataMember(Name = "comments_count", IsRequired = true, EmitDefaultValue = true)]
        public int CommentsCount { get; set; }

        /// <summary>
        /// Gets or Sets PositiveReactionsCount
        /// </summary>
        [DataMember(Name = "positive_reactions_count", IsRequired = true, EmitDefaultValue = true)]
        public int PositiveReactionsCount { get; set; }

        /// <summary>
        /// Gets or Sets PublicReactionsCount
        /// </summary>
        [DataMember(Name = "public_reactions_count", IsRequired = true, EmitDefaultValue = true)]
        public int PublicReactionsCount { get; set; }

        /// <summary>
        /// Gets or Sets PageViewsCount
        /// </summary>
        [DataMember(Name = "page_views_count", IsRequired = true, EmitDefaultValue = true)]
        public int PageViewsCount { get; set; }

        /// <summary>
        /// Crossposting or published date time
        /// </summary>
        /// <value>Crossposting or published date time</value>
        [DataMember(Name = "published_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime PublishedTimestamp { get; set; }

        /// <summary>
        /// The body of the article in Markdown format
        /// </summary>
        /// <value>The body of the article in Markdown format</value>
        [DataMember(Name = "body_markdown", IsRequired = true, EmitDefaultValue = true)]
        public string BodyMarkdown { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public SharedUser User { get; set; }

        /// <summary>
        /// Reading time, in minutes
        /// </summary>
        /// <value>Reading time, in minutes</value>
        [DataMember(Name = "reading_time_minutes", IsRequired = true, EmitDefaultValue = true)]
        public int ReadingTimeMinutes { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name = "organization", EmitDefaultValue = false)]
        public SharedOrganization Organization { get; set; }

        /// <summary>
        /// Gets or Sets FlareTag
        /// </summary>
        [DataMember(Name = "flare_tag", EmitDefaultValue = false)]
        public ArticleFlareTag FlareTag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ArticleMe {\n");
            sb.Append("  TypeOf: ").Append(TypeOf).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CoverImage: ").Append(CoverImage).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  TagList: ").Append(TagList).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  CanonicalUrl: ").Append(CanonicalUrl).Append("\n");
            sb.Append("  CommentsCount: ").Append(CommentsCount).Append("\n");
            sb.Append("  PositiveReactionsCount: ").Append(PositiveReactionsCount).Append("\n");
            sb.Append("  PublicReactionsCount: ").Append(PublicReactionsCount).Append("\n");
            sb.Append("  PageViewsCount: ").Append(PageViewsCount).Append("\n");
            sb.Append("  PublishedTimestamp: ").Append(PublishedTimestamp).Append("\n");
            sb.Append("  BodyMarkdown: ").Append(BodyMarkdown).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ReadingTimeMinutes: ").Append(ReadingTimeMinutes).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  FlareTag: ").Append(FlareTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArticleMe);
        }

        /// <summary>
        /// Returns true if ArticleMe instances are equal
        /// </summary>
        /// <param name="input">Instance of ArticleMe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticleMe input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TypeOf == input.TypeOf ||
                    (this.TypeOf != null &&
                    this.TypeOf.Equals(input.TypeOf))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CoverImage == input.CoverImage ||
                    (this.CoverImage != null &&
                    this.CoverImage.Equals(input.CoverImage))
                ) && 
                (
                    this.Published == input.Published ||
                    this.Published.Equals(input.Published)
                ) && 
                (
                    this.PublishedAt == input.PublishedAt ||
                    (this.PublishedAt != null &&
                    this.PublishedAt.Equals(input.PublishedAt))
                ) && 
                (
                    this.TagList == input.TagList ||
                    this.TagList != null &&
                    input.TagList != null &&
                    this.TagList.SequenceEqual(input.TagList)
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.CanonicalUrl == input.CanonicalUrl ||
                    (this.CanonicalUrl != null &&
                    this.CanonicalUrl.Equals(input.CanonicalUrl))
                ) && 
                (
                    this.CommentsCount == input.CommentsCount ||
                    this.CommentsCount.Equals(input.CommentsCount)
                ) && 
                (
                    this.PositiveReactionsCount == input.PositiveReactionsCount ||
                    this.PositiveReactionsCount.Equals(input.PositiveReactionsCount)
                ) && 
                (
                    this.PublicReactionsCount == input.PublicReactionsCount ||
                    this.PublicReactionsCount.Equals(input.PublicReactionsCount)
                ) && 
                (
                    this.PageViewsCount == input.PageViewsCount ||
                    this.PageViewsCount.Equals(input.PageViewsCount)
                ) && 
                (
                    this.PublishedTimestamp == input.PublishedTimestamp ||
                    (this.PublishedTimestamp != null &&
                    this.PublishedTimestamp.Equals(input.PublishedTimestamp))
                ) && 
                (
                    this.BodyMarkdown == input.BodyMarkdown ||
                    (this.BodyMarkdown != null &&
                    this.BodyMarkdown.Equals(input.BodyMarkdown))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.ReadingTimeMinutes == input.ReadingTimeMinutes ||
                    this.ReadingTimeMinutes.Equals(input.ReadingTimeMinutes)
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.FlareTag == input.FlareTag ||
                    (this.FlareTag != null &&
                    this.FlareTag.Equals(input.FlareTag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeOf != null)
                {
                    hashCode = (hashCode * 59) + this.TypeOf.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.CoverImage != null)
                {
                    hashCode = (hashCode * 59) + this.CoverImage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Published.GetHashCode();
                if (this.PublishedAt != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedAt.GetHashCode();
                }
                if (this.TagList != null)
                {
                    hashCode = (hashCode * 59) + this.TagList.GetHashCode();
                }
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.CanonicalUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CanonicalUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CommentsCount.GetHashCode();
                hashCode = (hashCode * 59) + this.PositiveReactionsCount.GetHashCode();
                hashCode = (hashCode * 59) + this.PublicReactionsCount.GetHashCode();
                hashCode = (hashCode * 59) + this.PageViewsCount.GetHashCode();
                if (this.PublishedTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.PublishedTimestamp.GetHashCode();
                }
                if (this.BodyMarkdown != null)
                {
                    hashCode = (hashCode * 59) + this.BodyMarkdown.GetHashCode();
                }
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReadingTimeMinutes.GetHashCode();
                if (this.Organization != null)
                {
                    hashCode = (hashCode * 59) + this.Organization.GetHashCode();
                }
                if (this.FlareTag != null)
                {
                    hashCode = (hashCode * 59) + this.FlareTag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
