/*
 * DEV API (beta)
 *
 *  Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  All requests must send a user-agent header.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format. 
 *
 * The version of the OpenAPI document: 0.9.7
 * Contact: yo@dev.to
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ForemVersionZero.Client.OpenAPIDateConverter;

namespace ForemVersionZero.Model
{
    /// <summary>
    /// The organization the resource belongs to
    /// </summary>
    [DataContract(Name = "SharedOrganization")]
    public partial class SharedOrganization : IEquatable<SharedOrganization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharedOrganization" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="username">username.</param>
        /// <param name="slug">slug.</param>
        /// <param name="profileImage">Profile image (640x640).</param>
        /// <param name="profileImage90">Profile image (90x90).</param>
        public SharedOrganization(string name = default(string), string username = default(string), string slug = default(string), string profileImage = default(string), string profileImage90 = default(string))
        {
            this.Name = name;
            this.Username = username;
            this.Slug = slug;
            this.ProfileImage = profileImage;
            this.ProfileImage90 = profileImage90;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name = "slug", EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// Profile image (640x640)
        /// </summary>
        /// <value>Profile image (640x640)</value>
        [DataMember(Name = "profile_image", EmitDefaultValue = false)]
        public string ProfileImage { get; set; }

        /// <summary>
        /// Profile image (90x90)
        /// </summary>
        /// <value>Profile image (90x90)</value>
        [DataMember(Name = "profile_image_90", EmitDefaultValue = false)]
        public string ProfileImage90 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharedOrganization {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  ProfileImage: ").Append(ProfileImage).Append("\n");
            sb.Append("  ProfileImage90: ").Append(ProfileImage90).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SharedOrganization);
        }

        /// <summary>
        /// Returns true if SharedOrganization instances are equal
        /// </summary>
        /// <param name="input">Instance of SharedOrganization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SharedOrganization input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.ProfileImage == input.ProfileImage ||
                    (this.ProfileImage != null &&
                    this.ProfileImage.Equals(input.ProfileImage))
                ) && 
                (
                    this.ProfileImage90 == input.ProfileImage90 ||
                    (this.ProfileImage90 != null &&
                    this.ProfileImage90.Equals(input.ProfileImage90))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.ProfileImage != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileImage.GetHashCode();
                }
                if (this.ProfileImage90 != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileImage90.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
