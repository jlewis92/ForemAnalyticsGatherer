/*
 * DEV API (beta)
 *
 *  Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  All requests must send a user-agent header.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format. 
 *
 * The version of the OpenAPI document: 0.9.7
 * Contact: yo@dev.to
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ForemVersionZero.Client;
using ForemVersionZero.Model;

namespace ForemVersionZero.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new listing.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  The user creating the listing or the organization on which behalf the user is creating for need to have enough credits for this operation to be successful. The server will prioritize the organization&#39;s credits over the user&#39;s credits.  ### Additional resources  - [Rails tests for Listings API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/listings_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingCreate">Listing to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Listing</returns>
        Listing CreateListing(ListingCreate? listingCreate = default(ListingCreate?), int operationIndex = 0);

        /// <summary>
        /// Create a new listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new listing.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  The user creating the listing or the organization on which behalf the user is creating for need to have enough credits for this operation to be successful. The server will prioritize the organization&#39;s credits over the user&#39;s credits.  ### Additional resources  - [Rails tests for Listings API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/listings_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingCreate">Listing to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Listing</returns>
        ApiResponse<Listing> CreateListingWithHttpInfo(ListingCreate? listingCreate = default(ListingCreate?), int operationIndex = 0);
        /// <summary>
        /// A listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single listing given its &#x60;id&#x60;.  An unpublished listing is only accessible if authentication is supplied and it belongs to the authenticated user. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Listing</returns>
        Listing GetListingById(long id, int operationIndex = 0);

        /// <summary>
        /// A listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single listing given its &#x60;id&#x60;.  An unpublished listing is only accessible if authentication is supplied and it belongs to the authenticated user. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Listing</returns>
        ApiResponse<Listing> GetListingByIdWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// Published listings
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="category">Using this parameter will return listings belonging to the requested category.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Listing&gt;</returns>
        List<Listing> GetListings(int? page = default(int?), int? perPage = default(int?), string? category = default(string?), int operationIndex = 0);

        /// <summary>
        /// Published listings
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="category">Using this parameter will return listings belonging to the requested category.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Listing&gt;</returns>
        ApiResponse<List<Listing>> GetListingsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string? category = default(string?), int operationIndex = 0);
        /// <summary>
        /// Published listings by category
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings belonging to the specified category.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">The category of the listing</param>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Listing&gt;</returns>
        List<Listing> GetListingsByCategory(ListingCategory category, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Published listings by category
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings belonging to the specified category.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">The category of the listing</param>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Listing&gt;</returns>
        ApiResponse<List<Listing>> GetListingsByCategoryWithHttpInfo(ListingCategory category, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update a listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update an existing listing. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="listingUpdate">Listing params for the update.  **Note**: except for bumping, publishing and unpublishing there are the following restrictions on the ability to update listings:  - the payload has to contain at least one param among &#x60;title&#x60;, &#x60;body_markdown&#x60; or &#x60;tags&#x60;/&#x60;tag_list&#x60; - the listing can&#39;t be updated if it has not been bumped in the last 24 hours - the listing can&#39;t be updated if it has been published but not recently bumped  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleShow</returns>
        ArticleShow UpdateListing(long id, ListingUpdate? listingUpdate = default(ListingUpdate?), int operationIndex = 0);

        /// <summary>
        /// Update a listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update an existing listing. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="listingUpdate">Listing params for the update.  **Note**: except for bumping, publishing and unpublishing there are the following restrictions on the ability to update listings:  - the payload has to contain at least one param among &#x60;title&#x60;, &#x60;body_markdown&#x60; or &#x60;tags&#x60;/&#x60;tag_list&#x60; - the listing can&#39;t be updated if it has not been bumped in the last 24 hours - the listing can&#39;t be updated if it has been published but not recently bumped  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleShow</returns>
        ApiResponse<ArticleShow> UpdateListingWithHttpInfo(long id, ListingUpdate? listingUpdate = default(ListingUpdate?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new listing.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  The user creating the listing or the organization on which behalf the user is creating for need to have enough credits for this operation to be successful. The server will prioritize the organization&#39;s credits over the user&#39;s credits.  ### Additional resources  - [Rails tests for Listings API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/listings_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingCreate">Listing to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Listing</returns>
        System.Threading.Tasks.Task<Listing> CreateListingAsync(ListingCreate? listingCreate = default(ListingCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new listing.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  The user creating the listing or the organization on which behalf the user is creating for need to have enough credits for this operation to be successful. The server will prioritize the organization&#39;s credits over the user&#39;s credits.  ### Additional resources  - [Rails tests for Listings API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/listings_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingCreate">Listing to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Listing)</returns>
        System.Threading.Tasks.Task<ApiResponse<Listing>> CreateListingWithHttpInfoAsync(ListingCreate? listingCreate = default(ListingCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// A listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single listing given its &#x60;id&#x60;.  An unpublished listing is only accessible if authentication is supplied and it belongs to the authenticated user. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Listing</returns>
        System.Threading.Tasks.Task<Listing> GetListingByIdAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// A listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single listing given its &#x60;id&#x60;.  An unpublished listing is only accessible if authentication is supplied and it belongs to the authenticated user. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Listing)</returns>
        System.Threading.Tasks.Task<ApiResponse<Listing>> GetListingByIdWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Published listings
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="category">Using this parameter will return listings belonging to the requested category.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Listing&gt;</returns>
        System.Threading.Tasks.Task<List<Listing>> GetListingsAsync(int? page = default(int?), int? perPage = default(int?), string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Published listings
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="category">Using this parameter will return listings belonging to the requested category.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Listing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Listing>>> GetListingsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Published listings by category
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings belonging to the specified category.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">The category of the listing</param>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Listing&gt;</returns>
        System.Threading.Tasks.Task<List<Listing>> GetListingsByCategoryAsync(ListingCategory category, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Published listings by category
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of listings belonging to the specified category.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">The category of the listing</param>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Listing&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Listing>>> GetListingsByCategoryWithHttpInfoAsync(ListingCategory category, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update an existing listing. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="listingUpdate">Listing params for the update.  **Note**: except for bumping, publishing and unpublishing there are the following restrictions on the ability to update listings:  - the payload has to contain at least one param among &#x60;title&#x60;, &#x60;body_markdown&#x60; or &#x60;tags&#x60;/&#x60;tag_list&#x60; - the listing can&#39;t be updated if it has not been bumped in the last 24 hours - the listing can&#39;t be updated if it has been published but not recently bumped  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleShow</returns>
        System.Threading.Tasks.Task<ArticleShow> UpdateListingAsync(long id, ListingUpdate? listingUpdate = default(ListingUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a listing
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update an existing listing. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="listingUpdate">Listing params for the update.  **Note**: except for bumping, publishing and unpublishing there are the following restrictions on the ability to update listings:  - the payload has to contain at least one param among &#x60;title&#x60;, &#x60;body_markdown&#x60; or &#x60;tags&#x60;/&#x60;tag_list&#x60; - the listing can&#39;t be updated if it has not been bumped in the last 24 hours - the listing can&#39;t be updated if it has been published but not recently bumped  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleShow)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleShow>> UpdateListingWithHttpInfoAsync(long id, ListingUpdate? listingUpdate = default(ListingUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListingsApi : IListingsApiSync, IListingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListingsApi : IListingsApi
    {
        private ForemVersionZero.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListingsApi(string basePath)
        {
            this.Configuration = ForemVersionZero.Client.Configuration.MergeConfigurations(
                ForemVersionZero.Client.GlobalConfiguration.Instance,
                new ForemVersionZero.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ForemVersionZero.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListingsApi(ForemVersionZero.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ForemVersionZero.Client.Configuration.MergeConfigurations(
                ForemVersionZero.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ForemVersionZero.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ListingsApi(ForemVersionZero.Client.ISynchronousClient client, ForemVersionZero.Client.IAsynchronousClient asyncClient, ForemVersionZero.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ForemVersionZero.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ForemVersionZero.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ForemVersionZero.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ForemVersionZero.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ForemVersionZero.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new listing This endpoint allows the client to create a new listing.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  The user creating the listing or the organization on which behalf the user is creating for need to have enough credits for this operation to be successful. The server will prioritize the organization&#39;s credits over the user&#39;s credits.  ### Additional resources  - [Rails tests for Listings API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/listings_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingCreate">Listing to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Listing</returns>
        public Listing CreateListing(ListingCreate? listingCreate = default(ListingCreate?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<Listing> localVarResponse = CreateListingWithHttpInfo(listingCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new listing This endpoint allows the client to create a new listing.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  The user creating the listing or the organization on which behalf the user is creating for need to have enough credits for this operation to be successful. The server will prioritize the organization&#39;s credits over the user&#39;s credits.  ### Additional resources  - [Rails tests for Listings API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/listings_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingCreate">Listing to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Listing</returns>
        public ForemVersionZero.Client.ApiResponse<Listing> CreateListingWithHttpInfo(ListingCreate? listingCreate = default(ListingCreate?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = listingCreate;

            localVarRequestOptions.Operation = "ListingsApi.CreateListing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Listing>("/listings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateListing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new listing This endpoint allows the client to create a new listing.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  The user creating the listing or the organization on which behalf the user is creating for need to have enough credits for this operation to be successful. The server will prioritize the organization&#39;s credits over the user&#39;s credits.  ### Additional resources  - [Rails tests for Listings API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/listings_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingCreate">Listing to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Listing</returns>
        public async System.Threading.Tasks.Task<Listing> CreateListingAsync(ListingCreate? listingCreate = default(ListingCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<Listing> localVarResponse = await CreateListingWithHttpInfoAsync(listingCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new listing This endpoint allows the client to create a new listing.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  The user creating the listing or the organization on which behalf the user is creating for need to have enough credits for this operation to be successful. The server will prioritize the organization&#39;s credits over the user&#39;s credits.  ### Additional resources  - [Rails tests for Listings API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/listings_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listingCreate">Listing to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Listing)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<Listing>> CreateListingWithHttpInfoAsync(ListingCreate? listingCreate = default(ListingCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = listingCreate;

            localVarRequestOptions.Operation = "ListingsApi.CreateListing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Listing>("/listings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateListing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A listing This endpoint allows the client to retrieve a single listing given its &#x60;id&#x60;.  An unpublished listing is only accessible if authentication is supplied and it belongs to the authenticated user. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Listing</returns>
        public Listing GetListingById(long id, int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<Listing> localVarResponse = GetListingByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A listing This endpoint allows the client to retrieve a single listing given its &#x60;id&#x60;.  An unpublished listing is only accessible if authentication is supplied and it belongs to the authenticated user. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Listing</returns>
        public ForemVersionZero.Client.ApiResponse<Listing> GetListingByIdWithHttpInfo(long id, int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionZero.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ListingsApi.GetListingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Listing>("/listings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A listing This endpoint allows the client to retrieve a single listing given its &#x60;id&#x60;.  An unpublished listing is only accessible if authentication is supplied and it belongs to the authenticated user. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Listing</returns>
        public async System.Threading.Tasks.Task<Listing> GetListingByIdAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<Listing> localVarResponse = await GetListingByIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A listing This endpoint allows the client to retrieve a single listing given its &#x60;id&#x60;.  An unpublished listing is only accessible if authentication is supplied and it belongs to the authenticated user. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Listing)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<Listing>> GetListingByIdWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionZero.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ListingsApi.GetListingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Listing>("/listings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Published listings This endpoint allows the client to retrieve a list of listings.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="category">Using this parameter will return listings belonging to the requested category.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Listing&gt;</returns>
        public List<Listing> GetListings(int? page = default(int?), int? perPage = default(int?), string? category = default(string?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<List<Listing>> localVarResponse = GetListingsWithHttpInfo(page, perPage, category);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published listings This endpoint allows the client to retrieve a list of listings.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="category">Using this parameter will return listings belonging to the requested category.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Listing&gt;</returns>
        public ForemVersionZero.Client.ApiResponse<List<Listing>> GetListingsWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string? category = default(string?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }

            localVarRequestOptions.Operation = "ListingsApi.GetListings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Listing>>("/listings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Published listings This endpoint allows the client to retrieve a list of listings.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="category">Using this parameter will return listings belonging to the requested category.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Listing&gt;</returns>
        public async System.Threading.Tasks.Task<List<Listing>> GetListingsAsync(int? page = default(int?), int? perPage = default(int?), string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<List<Listing>> localVarResponse = await GetListingsWithHttpInfoAsync(page, perPage, category, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published listings This endpoint allows the client to retrieve a list of listings.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="category">Using this parameter will return listings belonging to the requested category.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Listing&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<List<Listing>>> GetListingsWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string? category = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }

            localVarRequestOptions.Operation = "ListingsApi.GetListings";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Listing>>("/listings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Published listings by category This endpoint allows the client to retrieve a list of listings belonging to the specified category.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">The category of the listing</param>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Listing&gt;</returns>
        public List<Listing> GetListingsByCategory(ListingCategory category, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<List<Listing>> localVarResponse = GetListingsByCategoryWithHttpInfo(category, page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published listings by category This endpoint allows the client to retrieve a list of listings belonging to the specified category.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">The category of the listing</param>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Listing&gt;</returns>
        public ForemVersionZero.Client.ApiResponse<List<Listing>> GetListingsByCategoryWithHttpInfo(ListingCategory category, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category", ForemVersionZero.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ListingsApi.GetListingsByCategory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Listing>>("/listings/category/{category}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListingsByCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Published listings by category This endpoint allows the client to retrieve a list of listings belonging to the specified category.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">The category of the listing</param>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Listing&gt;</returns>
        public async System.Threading.Tasks.Task<List<Listing>> GetListingsByCategoryAsync(ListingCategory category, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<List<Listing>> localVarResponse = await GetListingsByCategoryWithHttpInfoAsync(category, page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published listings by category This endpoint allows the client to retrieve a list of listings belonging to the specified category.  \&quot;Listings\&quot; are classified ads that users create on DEV. They can be related to conference announcements, job offers, mentorships, upcoming events and more.  By default it will return published listings ordered by descending freshness.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">The category of the listing</param>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Listing&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<List<Listing>>> GetListingsByCategoryWithHttpInfoAsync(ListingCategory category, int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category", ForemVersionZero.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ListingsApi.GetListingsByCategory";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Listing>>("/listings/category/{category}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListingsByCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a listing This endpoint allows the client to update an existing listing. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="listingUpdate">Listing params for the update.  **Note**: except for bumping, publishing and unpublishing there are the following restrictions on the ability to update listings:  - the payload has to contain at least one param among &#x60;title&#x60;, &#x60;body_markdown&#x60; or &#x60;tags&#x60;/&#x60;tag_list&#x60; - the listing can&#39;t be updated if it has not been bumped in the last 24 hours - the listing can&#39;t be updated if it has been published but not recently bumped  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleShow</returns>
        public ArticleShow UpdateListing(long id, ListingUpdate? listingUpdate = default(ListingUpdate?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<ArticleShow> localVarResponse = UpdateListingWithHttpInfo(id, listingUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a listing This endpoint allows the client to update an existing listing. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="listingUpdate">Listing params for the update.  **Note**: except for bumping, publishing and unpublishing there are the following restrictions on the ability to update listings:  - the payload has to contain at least one param among &#x60;title&#x60;, &#x60;body_markdown&#x60; or &#x60;tags&#x60;/&#x60;tag_list&#x60; - the listing can&#39;t be updated if it has not been bumped in the last 24 hours - the listing can&#39;t be updated if it has been published but not recently bumped  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleShow</returns>
        public ForemVersionZero.Client.ApiResponse<ArticleShow> UpdateListingWithHttpInfo(long id, ListingUpdate? listingUpdate = default(ListingUpdate?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionZero.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = listingUpdate;

            localVarRequestOptions.Operation = "ListingsApi.UpdateListing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ArticleShow>("/listings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateListing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a listing This endpoint allows the client to update an existing listing. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="listingUpdate">Listing params for the update.  **Note**: except for bumping, publishing and unpublishing there are the following restrictions on the ability to update listings:  - the payload has to contain at least one param among &#x60;title&#x60;, &#x60;body_markdown&#x60; or &#x60;tags&#x60;/&#x60;tag_list&#x60; - the listing can&#39;t be updated if it has not been bumped in the last 24 hours - the listing can&#39;t be updated if it has been published but not recently bumped  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleShow</returns>
        public async System.Threading.Tasks.Task<ArticleShow> UpdateListingAsync(long id, ListingUpdate? listingUpdate = default(ListingUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<ArticleShow> localVarResponse = await UpdateListingWithHttpInfoAsync(id, listingUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a listing This endpoint allows the client to update an existing listing. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the listing</param>
        /// <param name="listingUpdate">Listing params for the update.  **Note**: except for bumping, publishing and unpublishing there are the following restrictions on the ability to update listings:  - the payload has to contain at least one param among &#x60;title&#x60;, &#x60;body_markdown&#x60; or &#x60;tags&#x60;/&#x60;tag_list&#x60; - the listing can&#39;t be updated if it has not been bumped in the last 24 hours - the listing can&#39;t be updated if it has been published but not recently bumped  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleShow)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<ArticleShow>> UpdateListingWithHttpInfoAsync(long id, ListingUpdate? listingUpdate = default(ListingUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionZero.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = listingUpdate;

            localVarRequestOptions.Operation = "ListingsApi.UpdateListing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ArticleShow>("/listings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateListing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
