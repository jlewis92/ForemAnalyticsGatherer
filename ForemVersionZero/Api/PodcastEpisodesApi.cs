/*
 * DEV API (beta)
 *
 *  Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  All requests must send a user-agent header.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format. 
 *
 * The version of the OpenAPI document: 0.9.7
 * Contact: yo@dev.to
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ForemVersionZero.Client;
using ForemVersionZero.Model;

namespace ForemVersionZero.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPodcastEpisodesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Published podcast episodes
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of podcast episodes.  \&quot;Podcast episodes\&quot; are episodes belonging to podcasts.  It will only return active podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="username">Using this parameter will retrieve episodes belonging to a specific podcast.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PodcastEpisode&gt;</returns>
        List<PodcastEpisode> GetPodcastEpisodes(int? page = default(int?), int? perPage = default(int?), string? username = default(string?), int operationIndex = 0);

        /// <summary>
        /// Published podcast episodes
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of podcast episodes.  \&quot;Podcast episodes\&quot; are episodes belonging to podcasts.  It will only return active podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="username">Using this parameter will retrieve episodes belonging to a specific podcast.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PodcastEpisode&gt;</returns>
        ApiResponse<List<PodcastEpisode>> GetPodcastEpisodesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string? username = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPodcastEpisodesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Published podcast episodes
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of podcast episodes.  \&quot;Podcast episodes\&quot; are episodes belonging to podcasts.  It will only return active podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="username">Using this parameter will retrieve episodes belonging to a specific podcast.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PodcastEpisode&gt;</returns>
        System.Threading.Tasks.Task<List<PodcastEpisode>> GetPodcastEpisodesAsync(int? page = default(int?), int? perPage = default(int?), string? username = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Published podcast episodes
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of podcast episodes.  \&quot;Podcast episodes\&quot; are episodes belonging to podcasts.  It will only return active podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="username">Using this parameter will retrieve episodes belonging to a specific podcast.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PodcastEpisode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PodcastEpisode>>> GetPodcastEpisodesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string? username = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPodcastEpisodesApi : IPodcastEpisodesApiSync, IPodcastEpisodesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PodcastEpisodesApi : IPodcastEpisodesApi
    {
        private ForemVersionZero.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PodcastEpisodesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PodcastEpisodesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PodcastEpisodesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PodcastEpisodesApi(string basePath)
        {
            this.Configuration = ForemVersionZero.Client.Configuration.MergeConfigurations(
                ForemVersionZero.Client.GlobalConfiguration.Instance,
                new ForemVersionZero.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ForemVersionZero.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PodcastEpisodesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PodcastEpisodesApi(ForemVersionZero.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ForemVersionZero.Client.Configuration.MergeConfigurations(
                ForemVersionZero.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ForemVersionZero.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PodcastEpisodesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PodcastEpisodesApi(ForemVersionZero.Client.ISynchronousClient client, ForemVersionZero.Client.IAsynchronousClient asyncClient, ForemVersionZero.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ForemVersionZero.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ForemVersionZero.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ForemVersionZero.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ForemVersionZero.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ForemVersionZero.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Published podcast episodes This endpoint allows the client to retrieve a list of podcast episodes.  \&quot;Podcast episodes\&quot; are episodes belonging to podcasts.  It will only return active podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="username">Using this parameter will retrieve episodes belonging to a specific podcast.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PodcastEpisode&gt;</returns>
        public List<PodcastEpisode> GetPodcastEpisodes(int? page = default(int?), int? perPage = default(int?), string? username = default(string?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<List<PodcastEpisode>> localVarResponse = GetPodcastEpisodesWithHttpInfo(page, perPage, username);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published podcast episodes This endpoint allows the client to retrieve a list of podcast episodes.  \&quot;Podcast episodes\&quot; are episodes belonging to podcasts.  It will only return active podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="username">Using this parameter will retrieve episodes belonging to a specific podcast.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PodcastEpisode&gt;</returns>
        public ForemVersionZero.Client.ApiResponse<List<PodcastEpisode>> GetPodcastEpisodesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string? username = default(string?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }

            localVarRequestOptions.Operation = "PodcastEpisodesApi.GetPodcastEpisodes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PodcastEpisode>>("/podcast_episodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPodcastEpisodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Published podcast episodes This endpoint allows the client to retrieve a list of podcast episodes.  \&quot;Podcast episodes\&quot; are episodes belonging to podcasts.  It will only return active podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="username">Using this parameter will retrieve episodes belonging to a specific podcast.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PodcastEpisode&gt;</returns>
        public async System.Threading.Tasks.Task<List<PodcastEpisode>> GetPodcastEpisodesAsync(int? page = default(int?), int? perPage = default(int?), string? username = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<List<PodcastEpisode>> localVarResponse = await GetPodcastEpisodesWithHttpInfoAsync(page, perPage, username, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published podcast episodes This endpoint allows the client to retrieve a list of podcast episodes.  \&quot;Podcast episodes\&quot; are episodes belonging to podcasts.  It will only return active podcast episodes that belong to published podcasts available on the platform, ordered by descending publication date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="username">Using this parameter will retrieve episodes belonging to a specific podcast.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PodcastEpisode&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<List<PodcastEpisode>>> GetPodcastEpisodesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string? username = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }

            localVarRequestOptions.Operation = "PodcastEpisodesApi.GetPodcastEpisodes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PodcastEpisode>>("/podcast_episodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPodcastEpisodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
