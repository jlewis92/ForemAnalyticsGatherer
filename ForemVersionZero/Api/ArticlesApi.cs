/*
 * DEV API (beta)
 *
 *  Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  All requests must send a user-agent header.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format. 
 *
 * The version of the OpenAPI document: 0.9.7
 * Contact: yo@dev.to
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ForemVersionZero.Client;
using ForemVersionZero.Model;

namespace ForemVersionZero.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticlesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 10 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleCreate">Article to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleShow</returns>
        ArticleShow CreateArticle(ArticleCreate? articleCreate = default(ArticleCreate?), int operationIndex = 0);

        /// <summary>
        /// Create a new article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 10 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleCreate">Article to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleShow</returns>
        ApiResponse<ArticleShow> CreateArticleWithHttpInfo(ArticleCreate? articleCreate = default(ArticleCreate?), int operationIndex = 0);
        /// <summary>
        /// A published article by ID
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleShow</returns>
        ArticleShow GetArticleById(int id, int operationIndex = 0);

        /// <summary>
        /// A published article by ID
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleShow</returns>
        ApiResponse<ArticleShow> GetArticleByIdWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// A published article by path
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single published article given its &#x60;path&#x60;. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User or organization username.</param>
        /// <param name="slug">Slug of the article.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleShow</returns>
        ArticleShow GetArticleByPath(string username, string slug, int operationIndex = 0);

        /// <summary>
        /// A published article by path
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single published article given its &#x60;path&#x60;. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User or organization username.</param>
        /// <param name="slug">Slug of the article.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleShow</returns>
        ApiResponse<ArticleShow> GetArticleByPathWithHttpInfo(string username, string slug, int operationIndex = 0);
        /// <summary>
        /// Published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;.  (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;.  (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;.  (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;.  (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        List<ArticleIndex> GetArticles(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;.  (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;.  (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;.  (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;.  (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        ApiResponse<List<ArticleIndex>> GetArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0);
        /// <summary>
        /// Articles with a video
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;24&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 24)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleVideo&gt;</returns>
        List<ArticleVideo> GetArticlesWithVideo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Articles with a video
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;24&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 24)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleVideo&gt;</returns>
        ApiResponse<List<ArticleVideo>> GetArticlesWithVideoWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Published articles sorted by publish date
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        List<ArticleIndex> GetLatestArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Published articles sorted by publish date
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        ApiResponse<List<ArticleIndex>> GetLatestArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// User&#39;s all articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleMe&gt;</returns>
        List<ArticleMe> GetUserAllArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// User&#39;s all articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleMe&gt;</returns>
        ApiResponse<List<ArticleMe>> GetUserAllArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// User&#39;s articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleMe&gt;</returns>
        List<ArticleMe> GetUserArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// User&#39;s articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleMe&gt;</returns>
        ApiResponse<List<ArticleMe>> GetUserArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// User&#39;s published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleMe&gt;</returns>
        List<ArticleMe> GetUserPublishedArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// User&#39;s published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleMe&gt;</returns>
        ApiResponse<List<ArticleMe>> GetUserPublishedArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// User&#39;s unpublished articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleMe&gt;</returns>
        List<ArticleMe> GetUserUnpublishedArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// User&#39;s unpublished articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleMe&gt;</returns>
        ApiResponse<List<ArticleMe>> GetUserUnpublishedArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update an article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 30 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="articleUpdate">Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful*  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleShow</returns>
        ArticleShow UpdateArticle(int id, ArticleUpdate? articleUpdate = default(ArticleUpdate?), int operationIndex = 0);

        /// <summary>
        /// Update an article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 30 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="articleUpdate">Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful*  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleShow</returns>
        ApiResponse<ArticleShow> UpdateArticleWithHttpInfo(int id, ArticleUpdate? articleUpdate = default(ArticleUpdate?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticlesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 10 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleCreate">Article to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleShow</returns>
        System.Threading.Tasks.Task<ArticleShow> CreateArticleAsync(ArticleCreate? articleCreate = default(ArticleCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 10 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleCreate">Article to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleShow)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleShow>> CreateArticleWithHttpInfoAsync(ArticleCreate? articleCreate = default(ArticleCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// A published article by ID
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleShow</returns>
        System.Threading.Tasks.Task<ArticleShow> GetArticleByIdAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// A published article by ID
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleShow)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleShow>> GetArticleByIdWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// A published article by path
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single published article given its &#x60;path&#x60;. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User or organization username.</param>
        /// <param name="slug">Slug of the article.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleShow</returns>
        System.Threading.Tasks.Task<ArticleShow> GetArticleByPathAsync(string username, string slug, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// A published article by path
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single published article given its &#x60;path&#x60;. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User or organization username.</param>
        /// <param name="slug">Slug of the article.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleShow)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleShow>> GetArticleByPathWithHttpInfoAsync(string username, string slug, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;.  (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;.  (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;.  (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;.  (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleIndex>> GetArticlesAsync(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;.  (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;.  (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;.  (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;.  (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleIndex>>> GetArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Articles with a video
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;24&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 24)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleVideo&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleVideo>> GetArticlesWithVideoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Articles with a video
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;24&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 24)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleVideo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleVideo>>> GetArticlesWithVideoWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Published articles sorted by publish date
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleIndex>> GetLatestArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Published articles sorted by publish date
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleIndex>>> GetLatestArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User&#39;s all articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleMe&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleMe>> GetUserAllArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User&#39;s all articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleMe&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleMe>>> GetUserAllArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User&#39;s articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleMe&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleMe>> GetUserArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User&#39;s articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleMe&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleMe>>> GetUserArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User&#39;s published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleMe&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleMe>> GetUserPublishedArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User&#39;s published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleMe&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleMe>>> GetUserPublishedArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User&#39;s unpublished articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleMe&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleMe>> GetUserUnpublishedArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User&#39;s unpublished articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleMe&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleMe>>> GetUserUnpublishedArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 30 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="articleUpdate">Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful*  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleShow</returns>
        System.Threading.Tasks.Task<ArticleShow> UpdateArticleAsync(int id, ArticleUpdate? articleUpdate = default(ArticleUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 30 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </remarks>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="articleUpdate">Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful*  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleShow)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArticleShow>> UpdateArticleWithHttpInfoAsync(int id, ArticleUpdate? articleUpdate = default(ArticleUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticlesApi : IArticlesApiSync, IArticlesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArticlesApi : IArticlesApi
    {
        private ForemVersionZero.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArticlesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArticlesApi(string basePath)
        {
            this.Configuration = ForemVersionZero.Client.Configuration.MergeConfigurations(
                ForemVersionZero.Client.GlobalConfiguration.Instance,
                new ForemVersionZero.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ForemVersionZero.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticlesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArticlesApi(ForemVersionZero.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ForemVersionZero.Client.Configuration.MergeConfigurations(
                ForemVersionZero.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ForemVersionZero.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ForemVersionZero.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticlesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ArticlesApi(ForemVersionZero.Client.ISynchronousClient client, ForemVersionZero.Client.IAsynchronousClient asyncClient, ForemVersionZero.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ForemVersionZero.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ForemVersionZero.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ForemVersionZero.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ForemVersionZero.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ForemVersionZero.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new article This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 10 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleCreate">Article to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleShow</returns>
        public ArticleShow CreateArticle(ArticleCreate? articleCreate = default(ArticleCreate?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<ArticleShow> localVarResponse = CreateArticleWithHttpInfo(articleCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new article This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 10 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleCreate">Article to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleShow</returns>
        public ForemVersionZero.Client.ApiResponse<ArticleShow> CreateArticleWithHttpInfo(ArticleCreate? articleCreate = default(ArticleCreate?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = articleCreate;

            localVarRequestOptions.Operation = "ArticlesApi.CreateArticle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ArticleShow>("/articles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateArticle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new article This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 10 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleCreate">Article to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleShow</returns>
        public async System.Threading.Tasks.Task<ArticleShow> CreateArticleAsync(ArticleCreate? articleCreate = default(ArticleCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<ArticleShow> localVarResponse = await CreateArticleWithHttpInfoAsync(articleCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new article This endpoint allows the client to create a new article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 10 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="articleCreate">Article to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleShow)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<ArticleShow>> CreateArticleWithHttpInfoAsync(ArticleCreate? articleCreate = default(ArticleCreate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = articleCreate;

            localVarRequestOptions.Operation = "ArticlesApi.CreateArticle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ArticleShow>("/articles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateArticle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A published article by ID This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleShow</returns>
        public ArticleShow GetArticleById(int id, int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<ArticleShow> localVarResponse = GetArticleByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A published article by ID This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleShow</returns>
        public ForemVersionZero.Client.ApiResponse<ArticleShow> GetArticleByIdWithHttpInfo(int id, int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionZero.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ArticlesApi.GetArticleById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ArticleShow>("/articles/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticleById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A published article by ID This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleShow</returns>
        public async System.Threading.Tasks.Task<ArticleShow> GetArticleByIdAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<ArticleShow> localVarResponse = await GetArticleByIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A published article by ID This endpoint allows the client to retrieve a single published article given its &#x60;id&#x60;. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleShow)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<ArticleShow>> GetArticleByIdWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionZero.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ArticlesApi.GetArticleById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArticleShow>("/articles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticleById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A published article by path This endpoint allows the client to retrieve a single published article given its &#x60;path&#x60;. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User or organization username.</param>
        /// <param name="slug">Slug of the article.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleShow</returns>
        public ArticleShow GetArticleByPath(string username, string slug, int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<ArticleShow> localVarResponse = GetArticleByPathWithHttpInfo(username, slug);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A published article by path This endpoint allows the client to retrieve a single published article given its &#x60;path&#x60;. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User or organization username.</param>
        /// <param name="slug">Slug of the article.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleShow</returns>
        public ForemVersionZero.Client.ApiResponse<ArticleShow> GetArticleByPathWithHttpInfo(string username, string slug, int operationIndex = 0)
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ForemVersionZero.Client.ApiException(400, "Missing required parameter 'username' when calling ArticlesApi->GetArticleByPath");
            }

            // verify the required parameter 'slug' is set
            if (slug == null)
            {
                throw new ForemVersionZero.Client.ApiException(400, "Missing required parameter 'slug' when calling ArticlesApi->GetArticleByPath");
            }

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", ForemVersionZero.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("slug", ForemVersionZero.Client.ClientUtils.ParameterToString(slug)); // path parameter

            localVarRequestOptions.Operation = "ArticlesApi.GetArticleByPath";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ArticleShow>("/articles/{username}/{slug}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticleByPath", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// A published article by path This endpoint allows the client to retrieve a single published article given its &#x60;path&#x60;. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User or organization username.</param>
        /// <param name="slug">Slug of the article.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleShow</returns>
        public async System.Threading.Tasks.Task<ArticleShow> GetArticleByPathAsync(string username, string slug, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<ArticleShow> localVarResponse = await GetArticleByPathWithHttpInfoAsync(username, slug, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// A published article by path This endpoint allows the client to retrieve a single published article given its &#x60;path&#x60;. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User or organization username.</param>
        /// <param name="slug">Slug of the article.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleShow)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<ArticleShow>> GetArticleByPathWithHttpInfoAsync(string username, string slug, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'username' is set
            if (username == null)
            {
                throw new ForemVersionZero.Client.ApiException(400, "Missing required parameter 'username' when calling ArticlesApi->GetArticleByPath");
            }

            // verify the required parameter 'slug' is set
            if (slug == null)
            {
                throw new ForemVersionZero.Client.ApiException(400, "Missing required parameter 'slug' when calling ArticlesApi->GetArticleByPath");
            }


            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("username", ForemVersionZero.Client.ClientUtils.ParameterToString(username)); // path parameter
            localVarRequestOptions.PathParameters.Add("slug", ForemVersionZero.Client.ClientUtils.ParameterToString(slug)); // path parameter

            localVarRequestOptions.Operation = "ArticlesApi.GetArticleByPath";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ArticleShow>("/articles/{username}/{slug}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticleByPath", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Published articles This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;.  (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;.  (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;.  (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;.  (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        public List<ArticleIndex> GetArticles(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleIndex>> localVarResponse = GetArticlesWithHttpInfo(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published articles This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;.  (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;.  (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;.  (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;.  (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        public ForemVersionZero.Client.ApiResponse<List<ArticleIndex>> GetArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (tagsExclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "tags_exclude", tagsExclude));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "top", top));
            }
            if (collectionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "collection_id", collectionId));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetArticles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleIndex>>("/articles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Published articles This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;.  (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;.  (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;.  (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;.  (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleIndex>> GetArticlesAsync(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleIndex>> localVarResponse = await GetArticlesWithHttpInfoAsync(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published articles This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;.  (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity.  (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;.  (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;.  (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;.  (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<List<ArticleIndex>>> GetArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (tagsExclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "tags_exclude", tagsExclude));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "top", top));
            }
            if (collectionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "collection_id", collectionId));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetArticles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleIndex>>("/articles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Articles with a video This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;24&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 24)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleVideo&gt;</returns>
        public List<ArticleVideo> GetArticlesWithVideo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleVideo>> localVarResponse = GetArticlesWithVideoWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Articles with a video This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;24&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 24)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleVideo&gt;</returns>
        public ForemVersionZero.Client.ApiResponse<List<ArticleVideo>> GetArticlesWithVideoWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetArticlesWithVideo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleVideo>>("/videos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticlesWithVideo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Articles with a video This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;24&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 24)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleVideo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleVideo>> GetArticlesWithVideoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleVideo>> localVarResponse = await GetArticlesWithVideoWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Articles with a video This endpoint allows the client to retrieve a list of articles that are uploaded with a video.  It will only return published video articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;24&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 24)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleVideo&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<List<ArticleVideo>>> GetArticlesWithVideoWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetArticlesWithVideo";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleVideo>>("/videos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticlesWithVideo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Published articles sorted by publish date This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        public List<ArticleIndex> GetLatestArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleIndex>> localVarResponse = GetLatestArticlesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published articles sorted by publish date This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        public ForemVersionZero.Client.ApiResponse<List<ArticleIndex>> GetLatestArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetLatestArticles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleIndex>>("/articles/latest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLatestArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Published articles sorted by publish date This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleIndex>> GetLatestArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleIndex>> localVarResponse = await GetLatestArticlesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published articles sorted by publish date This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.  It supports pagination, each page will contain &#x60;30&#x60; articles by default. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<List<ArticleIndex>>> GetLatestArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetLatestArticles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleIndex>>("/articles/latest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLatestArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s all articles This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleMe&gt;</returns>
        public List<ArticleMe> GetUserAllArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleMe>> localVarResponse = GetUserAllArticlesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s all articles This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleMe&gt;</returns>
        public ForemVersionZero.Client.ApiResponse<List<ArticleMe>> GetUserAllArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserAllArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleMe>>("/articles/me/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserAllArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s all articles This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleMe&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleMe>> GetUserAllArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleMe>> localVarResponse = await GetUserAllArticlesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s all articles This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleMe&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<List<ArticleMe>>> GetUserAllArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserAllArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleMe>>("/articles/me/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserAllArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleMe&gt;</returns>
        public List<ArticleMe> GetUserArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleMe>> localVarResponse = GetUserArticlesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleMe&gt;</returns>
        public ForemVersionZero.Client.ApiResponse<List<ArticleMe>> GetUserArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleMe>>("/articles/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleMe&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleMe>> GetUserArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleMe>> localVarResponse = await GetUserArticlesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleMe&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<List<ArticleMe>>> GetUserArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleMe>>("/articles/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s published articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleMe&gt;</returns>
        public List<ArticleMe> GetUserPublishedArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleMe>> localVarResponse = GetUserPublishedArticlesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s published articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleMe&gt;</returns>
        public ForemVersionZero.Client.ApiResponse<List<ArticleMe>> GetUserPublishedArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserPublishedArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleMe>>("/articles/me/published", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPublishedArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s published articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleMe&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleMe>> GetUserPublishedArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleMe>> localVarResponse = await GetUserPublishedArticlesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s published articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleMe&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<List<ArticleMe>>> GetUserPublishedArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserPublishedArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleMe>>("/articles/me/published", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPublishedArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s unpublished articles This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleMe&gt;</returns>
        public List<ArticleMe> GetUserUnpublishedArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleMe>> localVarResponse = GetUserUnpublishedArticlesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s unpublished articles This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleMe&gt;</returns>
        public ForemVersionZero.Client.ApiResponse<List<ArticleMe>> GetUserUnpublishedArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserUnpublishedArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleMe>>("/articles/me/unpublished", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserUnpublishedArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s unpublished articles This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleMe&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleMe>> GetUserUnpublishedArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<List<ArticleMe>> localVarResponse = await GetUserUnpublishedArticlesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s unpublished articles This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain &#x60;30&#x60; articles. 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page. (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleMe&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<List<ArticleMe>>> GetUserUnpublishedArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionZero.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserUnpublishedArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleMe>>("/articles/me/unpublished", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserUnpublishedArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an article This endpoint allows the client to update an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 30 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="articleUpdate">Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful*  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ArticleShow</returns>
        public ArticleShow UpdateArticle(int id, ArticleUpdate? articleUpdate = default(ArticleUpdate?), int operationIndex = 0)
        {
            ForemVersionZero.Client.ApiResponse<ArticleShow> localVarResponse = UpdateArticleWithHttpInfo(id, articleUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an article This endpoint allows the client to update an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 30 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="articleUpdate">Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful*  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ArticleShow</returns>
        public ForemVersionZero.Client.ApiResponse<ArticleShow> UpdateArticleWithHttpInfo(int id, ArticleUpdate? articleUpdate = default(ArticleUpdate?), int operationIndex = 0)
        {
            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionZero.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = articleUpdate;

            localVarRequestOptions.Operation = "ArticlesApi.UpdateArticle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ArticleShow>("/articles/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArticle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an article This endpoint allows the client to update an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 30 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="articleUpdate">Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful*  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ArticleShow</returns>
        public async System.Threading.Tasks.Task<ArticleShow> UpdateArticleAsync(int id, ArticleUpdate? articleUpdate = default(ArticleUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionZero.Client.ApiResponse<ArticleShow> localVarResponse = await UpdateArticleWithHttpInfoAsync(id, articleUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an article This endpoint allows the client to update an existing article.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  ### Rate limiting  There is a limit of 30 requests per 30 seconds.  ### Additional resources  - [Rails tests for Articles API](https://github.com/forem/forem/blob/main/spec/requests/api/v0/articles_spec.rb) 
        /// </summary>
        /// <exception cref="ForemVersionZero.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the article</param>
        /// <param name="articleUpdate">Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful*  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ArticleShow)</returns>
        public async System.Threading.Tasks.Task<ForemVersionZero.Client.ApiResponse<ArticleShow>> UpdateArticleWithHttpInfoAsync(int id, ArticleUpdate? articleUpdate = default(ArticleUpdate?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionZero.Client.RequestOptions localVarRequestOptions = new ForemVersionZero.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionZero.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionZero.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionZero.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = articleUpdate;

            localVarRequestOptions.Operation = "ArticlesApi.UpdateArticle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ArticleShow>("/articles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateArticle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
