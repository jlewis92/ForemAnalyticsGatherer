/*
 * Forem API V1
 *
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ForemVersionOne.Client;
using ForemVersionOne.Model;

namespace ForemVersionOne.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticlesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with &#x60;top&#x60;. (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.             This parameter can be used in conjuction with &#x60;state&#x60;. (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.             If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles.             If &#x60;state&#x3D;rising&#x60; the server will return rising articles.             This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days. &#x60;top&#x60; indicates the number of days since publication of the articles returned. This param can be used in conjuction with &#x60;tag&#x60;. (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        List<ArticleIndex> GetArticles(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0);

        /// <summary>
        /// Published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with &#x60;top&#x60;. (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.             This parameter can be used in conjuction with &#x60;state&#x60;. (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.             If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles.             If &#x60;state&#x3D;rising&#x60; the server will return rising articles.             This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days. &#x60;top&#x60; indicates the number of days since publication of the articles returned. This param can be used in conjuction with &#x60;tag&#x60;. (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        ApiResponse<List<ArticleIndex>> GetArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0);
        /// <summary>
        /// User&#39;s all articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        List<ArticleIndex> GetUserAllArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// User&#39;s all articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        ApiResponse<List<ArticleIndex>> GetUserAllArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// User&#39;s articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        List<ArticleIndex> GetUserArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// User&#39;s articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        ApiResponse<List<ArticleIndex>> GetUserArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// User&#39;s published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        List<ArticleIndex> GetUserPublishedArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// User&#39;s published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        ApiResponse<List<ArticleIndex>> GetUserPublishedArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// User&#39;s unpublished articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        List<ArticleIndex> GetUserUnpublishedArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// User&#39;s unpublished articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        ApiResponse<List<ArticleIndex>> GetUserUnpublishedArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Unpublish an article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to unpublish an article.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author&#39;s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the article to unpublish.</param>
        /// <param name="note">Content for the note that&#39;s created along with unpublishing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UnpublishArticle(int id, string? note = default(string?), int operationIndex = 0);

        /// <summary>
        /// Unpublish an article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to unpublish an article.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author&#39;s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the article to unpublish.</param>
        /// <param name="note">Content for the note that&#39;s created along with unpublishing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnpublishArticleWithHttpInfo(int id, string? note = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticlesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with &#x60;top&#x60;. (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.             This parameter can be used in conjuction with &#x60;state&#x60;. (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.             If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles.             If &#x60;state&#x3D;rising&#x60; the server will return rising articles.             This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days. &#x60;top&#x60; indicates the number of days since publication of the articles returned. This param can be used in conjuction with &#x60;tag&#x60;. (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleIndex>> GetArticlesAsync(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with &#x60;top&#x60;. (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.             This parameter can be used in conjuction with &#x60;state&#x60;. (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.             If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles.             If &#x60;state&#x3D;rising&#x60; the server will return rising articles.             This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days. &#x60;top&#x60; indicates the number of days since publication of the articles returned. This param can be used in conjuction with &#x60;tag&#x60;. (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleIndex>>> GetArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User&#39;s all articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleIndex>> GetUserAllArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User&#39;s all articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleIndex>>> GetUserAllArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User&#39;s articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleIndex>> GetUserArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User&#39;s articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleIndex>>> GetUserArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User&#39;s published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleIndex>> GetUserPublishedArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User&#39;s published articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleIndex>>> GetUserPublishedArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User&#39;s unpublished articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        System.Threading.Tasks.Task<List<ArticleIndex>> GetUserUnpublishedArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User&#39;s unpublished articles
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArticleIndex>>> GetUserUnpublishedArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unpublish an article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to unpublish an article.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author&#39;s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the article to unpublish.</param>
        /// <param name="note">Content for the note that&#39;s created along with unpublishing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnpublishArticleAsync(int id, string? note = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unpublish an article
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to unpublish an article.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author&#39;s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the article to unpublish.</param>
        /// <param name="note">Content for the note that&#39;s created along with unpublishing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnpublishArticleWithHttpInfoAsync(int id, string? note = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IArticlesApi : IArticlesApiSync, IArticlesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ArticlesApi : IArticlesApi
    {
        private ForemVersionOne.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArticlesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ArticlesApi(string basePath)
        {
            this.Configuration = ForemVersionOne.Client.Configuration.MergeConfigurations(
                ForemVersionOne.Client.GlobalConfiguration.Instance,
                new ForemVersionOne.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ForemVersionOne.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ForemVersionOne.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ForemVersionOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticlesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ArticlesApi(ForemVersionOne.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ForemVersionOne.Client.Configuration.MergeConfigurations(
                ForemVersionOne.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ForemVersionOne.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ForemVersionOne.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ForemVersionOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ArticlesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ArticlesApi(ForemVersionOne.Client.ISynchronousClient client, ForemVersionOne.Client.IAsynchronousClient asyncClient, ForemVersionOne.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ForemVersionOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ForemVersionOne.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ForemVersionOne.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ForemVersionOne.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ForemVersionOne.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Published articles This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with &#x60;top&#x60;. (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.             This parameter can be used in conjuction with &#x60;state&#x60;. (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.             If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles.             If &#x60;state&#x3D;rising&#x60; the server will return rising articles.             This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days. &#x60;top&#x60; indicates the number of days since publication of the articles returned. This param can be used in conjuction with &#x60;tag&#x60;. (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        public List<ArticleIndex> GetArticles(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0)
        {
            ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> localVarResponse = GetArticlesWithHttpInfo(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published articles This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with &#x60;top&#x60;. (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.             This parameter can be used in conjuction with &#x60;state&#x60;. (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.             If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles.             If &#x60;state&#x3D;rising&#x60; the server will return rising articles.             This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days. &#x60;top&#x60; indicates the number of days since publication of the articles returned. This param can be used in conjuction with &#x60;tag&#x60;. (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        public ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> GetArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (tagsExclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "tags_exclude", tagsExclude));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "top", top));
            }
            if (collectionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "collection_id", collectionId));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetArticles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleIndex>>("/api/articles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Published articles This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with &#x60;top&#x60;. (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.             This parameter can be used in conjuction with &#x60;state&#x60;. (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.             If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles.             If &#x60;state&#x3D;rising&#x60; the server will return rising articles.             This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days. &#x60;top&#x60; indicates the number of days since publication of the articles returned. This param can be used in conjuction with &#x60;tag&#x60;. (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleIndex>> GetArticlesAsync(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> localVarResponse = await GetArticlesWithHttpInfoAsync(page, perPage, tag, tags, tagsExclude, username, state, top, collectionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Published articles This endpoint allows the client to retrieve a list of articles.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  By default it will return featured, published articles ordered by descending popularity.  It supports pagination, each page will contain &#x60;30&#x60; articles by default.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="tag">Using this parameter will retrieve articles that contain the requested tag. Articles will be ordered by descending popularity.This parameter can be used in conjuction with &#x60;top&#x60;. (optional)</param>
        /// <param name="tags">Using this parameter will retrieve articles with any of the comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="tagsExclude">Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags. Articles will be ordered by descending popularity. (optional)</param>
        /// <param name="username">Using this parameter will retrieve articles belonging             to a User or Organization ordered by descending publication date.             If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.             This parameter can be used in conjuction with &#x60;state&#x60;. (optional)</param>
        /// <param name="state">Using this parameter will allow the client to check which articles are fresh or rising.             If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles.             If &#x60;state&#x3D;rising&#x60; the server will return rising articles.             This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)</param>
        /// <param name="top">Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days. &#x60;top&#x60; indicates the number of days since publication of the articles returned. This param can be used in conjuction with &#x60;tag&#x60;. (optional)</param>
        /// <param name="collectionId">Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<List<ArticleIndex>>> GetArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string? tag = default(string?), string? tags = default(string?), string? tagsExclude = default(string?), string? username = default(string?), string? state = default(string?), int? top = default(int?), int? collectionId = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (tagsExclude != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "tags_exclude", tagsExclude));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (top != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "top", top));
            }
            if (collectionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "collection_id", collectionId));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetArticles";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleIndex>>("/api/articles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s all articles This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        public List<ArticleIndex> GetUserAllArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> localVarResponse = GetUserAllArticlesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s all articles This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        public ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> GetUserAllArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserAllArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleIndex>>("/api/articles/me/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserAllArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s all articles This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleIndex>> GetUserAllArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> localVarResponse = await GetUserAllArticlesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s all articles This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  It will return both published and unpublished articles with pagination.  Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.  By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<List<ArticleIndex>>> GetUserAllArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserAllArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleIndex>>("/api/articles/me/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserAllArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        public List<ArticleIndex> GetUserArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> localVarResponse = GetUserArticlesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        public ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> GetUserArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleIndex>>("/api/articles/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleIndex>> GetUserArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> localVarResponse = await GetUserArticlesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<List<ArticleIndex>>> GetUserArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleIndex>>("/api/articles/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s published articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        public List<ArticleIndex> GetUserPublishedArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> localVarResponse = GetUserPublishedArticlesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s published articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        public ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> GetUserPublishedArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserPublishedArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleIndex>>("/api/articles/me/published", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPublishedArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s published articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleIndex>> GetUserPublishedArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> localVarResponse = await GetUserPublishedArticlesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s published articles This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Published articles will be in reverse chronological publication order.  It will return published articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<List<ArticleIndex>>> GetUserPublishedArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserPublishedArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleIndex>>("/api/articles/me/published", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPublishedArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s unpublished articles This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArticleIndex&gt;</returns>
        public List<ArticleIndex> GetUserUnpublishedArticles(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> localVarResponse = GetUserUnpublishedArticlesWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s unpublished articles This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArticleIndex&gt;</returns>
        public ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> GetUserUnpublishedArticlesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserUnpublishedArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArticleIndex>>("/api/articles/me/unpublished", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserUnpublishedArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// User&#39;s unpublished articles This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArticleIndex&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArticleIndex>> GetUserUnpublishedArticlesAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ForemVersionOne.Client.ApiResponse<List<ArticleIndex>> localVarResponse = await GetUserUnpublishedArticlesWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User&#39;s unpublished articles This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.  \&quot;Articles\&quot; are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.  Unpublished articles will be in reverse chronological creation order.  It will return unpublished articles with pagination. By default a page will contain 30 articles.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Pagination page (optional, default to 1)</param>
        /// <param name="perPage">Page size (the number of items to return per page). The default maximum value can be overridden by \&quot;API_PER_PAGE_MAX\&quot; environment variable. (optional, default to 30)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArticleIndex&gt;)</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<List<ArticleIndex>>> GetUserUnpublishedArticlesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "ArticlesApi.GetUserUnpublishedArticles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArticleIndex>>("/api/articles/me/unpublished", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserUnpublishedArticles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpublish an article This endpoint allows the client to unpublish an article.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author&#39;s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the article to unpublish.</param>
        /// <param name="note">Content for the note that&#39;s created along with unpublishing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UnpublishArticle(int id, string? note = default(string?), int operationIndex = 0)
        {
            UnpublishArticleWithHttpInfo(id, note);
        }

        /// <summary>
        /// Unpublish an article This endpoint allows the client to unpublish an article.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author&#39;s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the article to unpublish.</param>
        /// <param name="note">Content for the note that&#39;s created along with unpublishing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ForemVersionOne.Client.ApiResponse<Object> UnpublishArticleWithHttpInfo(int id, string? note = default(string?), int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionOne.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (note != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "note", note));
            }

            localVarRequestOptions.Operation = "ArticlesApi.UnpublishArticle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/articles/{id}/unpublish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnpublishArticle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unpublish an article This endpoint allows the client to unpublish an article.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author&#39;s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the article to unpublish.</param>
        /// <param name="note">Content for the note that&#39;s created along with unpublishing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnpublishArticleAsync(int id, string? note = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnpublishArticleWithHttpInfoAsync(id, note, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unpublish an article This endpoint allows the client to unpublish an article.  The user associated with the API key must have any &#39;admin&#39; or &#39;moderator&#39; role.  The article will be unpublished and will no longer be visible to the public. It will remain in the database and will set back to draft status on the author&#39;s posts dashboard. Any notifications associated with the article will be deleted. Any comments on the article will remain.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the article to unpublish.</param>
        /// <param name="note">Content for the note that&#39;s created along with unpublishing (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<Object>> UnpublishArticleWithHttpInfoAsync(int id, string? note = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionOne.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (note != null)
            {
                localVarRequestOptions.QueryParameters.Add(ForemVersionOne.Client.ClientUtils.ParameterToMultiMap("", "note", note));
            }

            localVarRequestOptions.Operation = "ArticlesApi.UnpublishArticle";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/articles/{id}/unpublish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnpublishArticle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
