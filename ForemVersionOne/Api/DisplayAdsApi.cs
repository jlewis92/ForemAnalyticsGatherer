/*
 * Forem API V1
 *
 * Access Forem articles, users and other resources via API.         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).         All endpoints can be accessed with the 'api-key' header and a accept header, but         some of them are accessible publicly without authentication.          Dates and date times, unless otherwise specified, must be in         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ForemVersionOne.Client;
using ForemVersionOne.Model;

namespace ForemVersionOne.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisplayAdsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all display ads.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiDisplayAdsGet(int operationIndex = 0);

        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all display ads.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiDisplayAdsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// display ad
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single display ad, via its id.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiDisplayAdsIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// display ad
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single display ad, via its id.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiDisplayAdsIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update the attributes of a single display ad, via its id.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiDisplayAdsIdPut(int id, ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0);

        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update the attributes of a single display ad, via its id.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiDisplayAdsIdPutWithHttpInfo(int id, ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0);
        /// <summary>
        /// unpublish
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to remove a display ad from rotation by un-publishing it.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiDisplayAdsIdUnpublishPut(int id, int operationIndex = 0);

        /// <summary>
        /// unpublish
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to remove a display ad from rotation by un-publishing it.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiDisplayAdsIdUnpublishPutWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new display ad.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiDisplayAdsPost(ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0);

        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new display ad.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiDisplayAdsPostWithHttpInfo(ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisplayAdsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all display ads.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiDisplayAdsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a list of all display ads.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiDisplayAdsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// display ad
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single display ad, via its id.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiDisplayAdsIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// display ad
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to retrieve a single display ad, via its id.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiDisplayAdsIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update the attributes of a single display ad, via its id.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiDisplayAdsIdPutAsync(int id, ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to update the attributes of a single display ad, via its id.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiDisplayAdsIdPutWithHttpInfoAsync(int id, ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// unpublish
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to remove a display ad from rotation by un-publishing it.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiDisplayAdsIdUnpublishPutAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// unpublish
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to remove a display ad from rotation by un-publishing it.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiDisplayAdsIdUnpublishPutWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new display ad.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiDisplayAdsPostAsync(ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// display ads
        /// </summary>
        /// <remarks>
        /// This endpoint allows the client to create a new display ad.
        /// </remarks>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiDisplayAdsPostWithHttpInfoAsync(ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDisplayAdsApi : IDisplayAdsApiSync, IDisplayAdsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DisplayAdsApi : IDisplayAdsApi
    {
        private ForemVersionOne.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayAdsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DisplayAdsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayAdsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DisplayAdsApi(string basePath)
        {
            this.Configuration = ForemVersionOne.Client.Configuration.MergeConfigurations(
                ForemVersionOne.Client.GlobalConfiguration.Instance,
                new ForemVersionOne.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ForemVersionOne.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ForemVersionOne.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ForemVersionOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayAdsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DisplayAdsApi(ForemVersionOne.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ForemVersionOne.Client.Configuration.MergeConfigurations(
                ForemVersionOne.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ForemVersionOne.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ForemVersionOne.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ForemVersionOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DisplayAdsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DisplayAdsApi(ForemVersionOne.Client.ISynchronousClient client, ForemVersionOne.Client.IAsynchronousClient asyncClient, ForemVersionOne.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ForemVersionOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ForemVersionOne.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ForemVersionOne.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ForemVersionOne.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ForemVersionOne.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// display ads This endpoint allows the client to retrieve a list of all display ads.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiDisplayAdsGet(int operationIndex = 0)
        {
            ApiDisplayAdsGetWithHttpInfo();
        }

        /// <summary>
        /// display ads This endpoint allows the client to retrieve a list of all display ads.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ForemVersionOne.Client.ApiResponse<Object> ApiDisplayAdsGetWithHttpInfo(int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DisplayAdsApi.ApiDisplayAdsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/display_ads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDisplayAdsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display ads This endpoint allows the client to retrieve a list of all display ads.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiDisplayAdsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiDisplayAdsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// display ads This endpoint allows the client to retrieve a list of all display ads.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<Object>> ApiDisplayAdsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DisplayAdsApi.ApiDisplayAdsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/display_ads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDisplayAdsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display ad This endpoint allows the client to retrieve a single display ad, via its id.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiDisplayAdsIdGet(int id, int operationIndex = 0)
        {
            ApiDisplayAdsIdGetWithHttpInfo(id);
        }

        /// <summary>
        /// display ad This endpoint allows the client to retrieve a single display ad, via its id.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ForemVersionOne.Client.ApiResponse<Object> ApiDisplayAdsIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionOne.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DisplayAdsApi.ApiDisplayAdsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/display_ads/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDisplayAdsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display ad This endpoint allows the client to retrieve a single display ad, via its id.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiDisplayAdsIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiDisplayAdsIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// display ad This endpoint allows the client to retrieve a single display ad, via its id.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<Object>> ApiDisplayAdsIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionOne.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DisplayAdsApi.ApiDisplayAdsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/display_ads/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDisplayAdsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display ads This endpoint allows the client to update the attributes of a single display ad, via its id.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiDisplayAdsIdPut(int id, ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0)
        {
            ApiDisplayAdsIdPutWithHttpInfo(id, apiDisplayAdsGetRequest);
        }

        /// <summary>
        /// display ads This endpoint allows the client to update the attributes of a single display ad, via its id.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ForemVersionOne.Client.ApiResponse<Object> ApiDisplayAdsIdPutWithHttpInfo(int id, ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionOne.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = apiDisplayAdsGetRequest;

            localVarRequestOptions.Operation = "DisplayAdsApi.ApiDisplayAdsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/display_ads/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDisplayAdsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display ads This endpoint allows the client to update the attributes of a single display ad, via its id.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiDisplayAdsIdPutAsync(int id, ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiDisplayAdsIdPutWithHttpInfoAsync(id, apiDisplayAdsGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// display ads This endpoint allows the client to update the attributes of a single display ad, via its id.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<Object>> ApiDisplayAdsIdPutWithHttpInfoAsync(int id, ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionOne.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = apiDisplayAdsGetRequest;

            localVarRequestOptions.Operation = "DisplayAdsApi.ApiDisplayAdsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/display_ads/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDisplayAdsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// unpublish This endpoint allows the client to remove a display ad from rotation by un-publishing it.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiDisplayAdsIdUnpublishPut(int id, int operationIndex = 0)
        {
            ApiDisplayAdsIdUnpublishPutWithHttpInfo(id);
        }

        /// <summary>
        /// unpublish This endpoint allows the client to remove a display ad from rotation by un-publishing it.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ForemVersionOne.Client.ApiResponse<Object> ApiDisplayAdsIdUnpublishPutWithHttpInfo(int id, int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionOne.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DisplayAdsApi.ApiDisplayAdsIdUnpublishPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/display_ads/{id}/unpublish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDisplayAdsIdUnpublishPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// unpublish This endpoint allows the client to remove a display ad from rotation by un-publishing it.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiDisplayAdsIdUnpublishPutAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiDisplayAdsIdUnpublishPutWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// unpublish This endpoint allows the client to remove a display ad from rotation by un-publishing it.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the user to unpublish.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<Object>> ApiDisplayAdsIdUnpublishPutWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", ForemVersionOne.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DisplayAdsApi.ApiDisplayAdsIdUnpublishPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/display_ads/{id}/unpublish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDisplayAdsIdUnpublishPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display ads This endpoint allows the client to create a new display ad.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiDisplayAdsPost(ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0)
        {
            ApiDisplayAdsPostWithHttpInfo(apiDisplayAdsGetRequest);
        }

        /// <summary>
        /// display ads This endpoint allows the client to create a new display ad.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ForemVersionOne.Client.ApiResponse<Object> ApiDisplayAdsPostWithHttpInfo(ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0)
        {
            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apiDisplayAdsGetRequest;

            localVarRequestOptions.Operation = "DisplayAdsApi.ApiDisplayAdsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/display_ads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDisplayAdsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// display ads This endpoint allows the client to create a new display ad.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiDisplayAdsPostAsync(ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiDisplayAdsPostWithHttpInfoAsync(apiDisplayAdsGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// display ads This endpoint allows the client to create a new display ad.
        /// </summary>
        /// <exception cref="ForemVersionOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiDisplayAdsGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ForemVersionOne.Client.ApiResponse<Object>> ApiDisplayAdsPostWithHttpInfoAsync(ApiDisplayAdsGetRequest? apiDisplayAdsGetRequest = default(ApiDisplayAdsGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ForemVersionOne.Client.RequestOptions localVarRequestOptions = new ForemVersionOne.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ForemVersionOne.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ForemVersionOne.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = apiDisplayAdsGetRequest;

            localVarRequestOptions.Operation = "DisplayAdsApi.ApiDisplayAdsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api-key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api-key", this.Configuration.GetApiKeyWithPrefix("api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/display_ads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiDisplayAdsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
